
**回顾CAP原则**
    RDBMS(Mysq1、 oracle 、 sq1server)  ===>ACID
	NosQL (redis 、 mongdb）===> CAP

**ACID是什么？**
    - A（Atomicity）原子性
    - C (consistency)一致性
    - I(Isolation）隔离性
    - D (Durability）持久性

**CAP是什么**
    - c (consistency）强一致性
    - A (Availability）可用性
    - P(Partition tolerance）分区容错性

CAP的三进二： CA AP CP

**CPA的核心理论**

根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类:
一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求
    - CA:单点集群，满足一政性，可用性的系统，通常可扩展性较差
    - CP:满足一致性，分区容错性的系统，通常性能不是特别高
    - CP:满足一致性，分区容错性的系统，通常性能不是特别高


**作为服务注册中心，Eureka和zookeeper好在哪里？**

著名的CAP理论指出，一个分布式系统不可能同时满足c（一致性）、A(可用性）、P(容错性）。

由于分区容错性P在分布式系统中是必须要保证的，因此我们只能在A和c.之间进行权衡。
 -zookeeper保证的是CP;
 -Eureka保证的是AP:


**Zookeeper保证的是CP**
    
    当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不
能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会
出现这样一种种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行
1eader选举。问题在于，选举1eader的时间太长，30~120s，且选举期间整个zk集群都是不可用
的，这就导致在选举期间注册服务症痪。在云部署的环境下，因为网络问题使得zk集群失去master
节点是较大概率会发生的事件，虽然服务最终能够恢复，但是漫长的选举时间导致的注册长期不可
用是不能容忍的。

**Eureka保证的是AP**

    Eureka看明白了这一点，因此在设计时就优先保可用性。Eureka各个节点都是平等的
，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka
的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台
Eureka还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，除此之外，
Eurekai还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka
就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况:
    1.Eureka不再从注册列表中移除，因为长时间没收到心跳而应该过期的服务
    2.Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上（即保证当前节
点依然可用）
    3．当网络稳定时，当前实例新的注册信息会被同步到其他节点中


因此，Eureka可以很好的应对网络故障导致部分节点失去联系的情况，而不会像zookeer那样是整个注册服务瘫痪。